// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpaPersistence;

namespace SpaPersistence.Migrations
{
    [DbContext(typeof(ApplicattionDbContext))]
    [Migration("20210618195336_AddEmailPropertyToAlumnTable")]
    partial class AddEmailPropertyToAlumnTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SpaModel.Models.Alumno", b =>
                {
                    b.Property<int>("AlumnoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FotoPerfil")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("AlumnoId");

                    b.ToTable("Alumno");
                });

            modelBuilder.Entity("SpaModel.Models.Comentario", b =>
                {
                    b.Property<int>("ComentarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<string>("Comentario1")
                        .HasColumnName("Comentario")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<int>("Puntaje")
                        .HasColumnType("int");

                    b.HasKey("ComentarioId");

                    b.HasIndex("AlumnoId");

                    b.HasIndex("CursoId");

                    b.ToTable("Comentario");
                });

            modelBuilder.Entity("SpaModel.Models.Curso", b =>
                {
                    b.Property<int>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FechaPublicacion")
                        .HasColumnType("datetime");

                    b.Property<string>("FotoPortada")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("Titulo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CursoId");

                    b.ToTable("Curso");
                });

            modelBuilder.Entity("SpaModel.Models.CursoInstructor", b =>
                {
                    b.Property<int>("CursoInstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.HasKey("CursoInstructorId");

                    b.HasIndex("CursoId");

                    b.HasIndex("InstructorId");

                    b.ToTable("CursoInstructor");
                });

            modelBuilder.Entity("SpaModel.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FotoPerfil")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Grado")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("InstructorId");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("SpaModel.Models.Precio", b =>
                {
                    b.Property<int>("PrecioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PrecioActual")
                        .HasColumnType("numeric(14, 2)");

                    b.Property<decimal?>("Promocion")
                        .HasColumnType("numeric(14, 2)");

                    b.HasKey("PrecioId");

                    b.HasIndex("CursoId");

                    b.ToTable("Precio");
                });

            modelBuilder.Entity("SpaModel.Models.Comentario", b =>
                {
                    b.HasOne("SpaModel.Models.Alumno", "Alumno")
                        .WithMany("Comentario")
                        .HasForeignKey("AlumnoId")
                        .HasConstraintName("FK_Comentario_Alumno")
                        .IsRequired();

                    b.HasOne("SpaModel.Models.Curso", "Curso")
                        .WithMany("Comentario")
                        .HasForeignKey("CursoId")
                        .HasConstraintName("FK_Comentario_Curso")
                        .IsRequired();
                });

            modelBuilder.Entity("SpaModel.Models.CursoInstructor", b =>
                {
                    b.HasOne("SpaModel.Models.Curso", "Curso")
                        .WithMany("CursoInstructor")
                        .HasForeignKey("CursoId")
                        .HasConstraintName("FK_CursoInstructor_Curso")
                        .IsRequired();

                    b.HasOne("SpaModel.Models.Instructor", "Instructor")
                        .WithMany("CursoInstructor")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK_CursoInstructor_Instructor")
                        .IsRequired();
                });

            modelBuilder.Entity("SpaModel.Models.Precio", b =>
                {
                    b.HasOne("SpaModel.Models.Curso", "Curso")
                        .WithMany("Precio")
                        .HasForeignKey("CursoId")
                        .HasConstraintName("FK_Precio_Curso")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
